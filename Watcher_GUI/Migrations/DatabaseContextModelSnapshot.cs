// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher_GUI;

namespace Watcher_GUI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4");

            modelBuilder.Entity("Watcher_GUI.Symbol", b =>
                {
                    b.Property<string>("SymbolName")
                        .HasColumnType("TEXT");

                    b.Property<string>("IoTHubName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongRenkoChartConnectionString")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongRenkoChartDeviceName")
                        .HasColumnType("TEXT");

                    b.Property<double>("LongTermATR")
                        .HasColumnType("REAL");

                    b.Property<string>("LongTermMasterDirection")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongTermMasterTimeFrame")
                        .HasColumnType("TEXT");

                    b.Property<int>("LongTermRenkoBarSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LongTermRenkoBarType")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongTermRenkoLastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongTermTrend")
                        .HasColumnType("TEXT");

                    b.Property<string>("LongTermTrendTimeFrame")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortRenkoChartConnectionString")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortRenkoChartDeviceName")
                        .HasColumnType("TEXT");

                    b.Property<double>("ShortTermATR")
                        .HasColumnType("REAL");

                    b.Property<string>("ShortTermMasterDirection")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortTermMasterTimeFrame")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShortTermRenkoBarSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortTermRenkoBarType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortTermRenkoLastUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortTermTrend")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortTermTrendTimeFrame")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeChartConnectionString")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeChartDeviceName")
                        .HasColumnType("TEXT");

                    b.HasKey("SymbolName");

                    b.ToTable("Symbol");
                });

            modelBuilder.Entity("Watcher_GUI.Watcher", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventHubEndpoint")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventHubKeyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventHubPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventHubPrimayKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("IoTHubName")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Watcher");
                });
#pragma warning restore 612, 618
        }
    }
}
